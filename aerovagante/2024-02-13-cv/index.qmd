---
title: "Cómo hacer un curriculum vitae en Quarto"
description: "Existen tantas formas de hacer una hoja de vida o CV como currículos puedan existir. ¿Qué tal si hacemos un CV utilizando Quarto?"

date: 2024-04-14
image: preview.png

categories:
  - LaTeX
  - personal
  - quarto
  - RStudio

citation: 
  url: http://alexespinosaco.github.io/aerovagante/2024-02-13-cv/

execute: 
  message: false
  warning: false
  eval: false

lang: es

toc: true

draft: true
---

## TL;DR

Explicación de cómo hacer un CV multiformato (HTML y PDF) utilizando Quarto y RStudio, además de la plantilla `quarto-cv` y la extensión `multibib` de Pandoc.

## Proposito

Actualizar nuestro CV puede ser una actividad constante y que demanda cierta cantidad de tiempo. Quizá la mayoría de nosotros lo hacemos en un documento de Word o Docs. Yo la tenía en Pages, donde me sentía más cómodo y donde la había realizado por primera vez hace ya muchísimos años. Hace poco, en la última actualización, pensé «debería hacerla en Quarto», dicho y hecho... o bueno, más o menos. Desde ese momento, hasta tener una versión con la que me siento a gusto, que se puede ver acá mismo, ha pasado tiempo y varios aprendizajes de por medio para poderla hacer, desde por fin enfrentarme a aprender LaTeX hasta comenzar a entender cómo funcionan las plantillas y extensiones de Quarto.

## Opciones disponibles {#sec-intro}

## Paso a paso

### Requisitos

-   [RStudio](https://posit.co/download/rstudio-desktop/)
-   [Quarto](http://quarto.org) (versión 1.4 o superior)

### Crear un proyecto

Antes de comenzar cualquier trabajo que implique Quarto o RStudio, es muy recomendable crear un proyecto de RStudio o de Quarto[^1]. Yo creé mi proyecto con el muy original nombre de **cv**.

[^1]: [Qué son los proyectos de RStudio y cómo crearlos.](https://es.r4ds.hadley.nz/08-workflow-projects.html)

Después de crear el proyecto y abrir nuestro proyecto, utilizaremos la Terminal integrada en RStudio[^2] para instalar la plantilla `quarto-cv` y la extensión `multibib`.

[^2]: [Ubicación de la Terminal en RStudio.](https://support.posit.co/hc/en-us/articles/115010737148-Using-the-RStudio-Terminal-in-the-RStudio-IDE)\
También se puede utilizar la Terminal por defecto del sistema operativo, estando el la carpeta donde está nuestro proyecto.

### Instalar `quarto-cv`

`quarto-cv` lo instalamos utilizando el siguiente comando:

``` {.bash filename="Terminal"}
quarto install extension mps9506/quarto-cv
```

Cuando introduzcamos el anterior comando, seguimos las instrucciones (introducir Yes, Yes, No). Sí lo hemos hecho bien, la Terminal nos debe de aparecer lo siguiente:

``` {.bash filename="Terminal"}
Quarto extensions may execute code when documents are rendered. If you do not 
trust the authors of the extension, we recommend that you do not install or 
use the extension.
 ? Do you trust the authors of this extension (Y/n) › Yes
[✓] Downloading
[✓] Unzipping
    Found 1 extension.

The following changes will be made:
quarto-cv   [Install]   2.0.0 (format)
 ? Would you like to continue (Y/n) › Yes

[✓] Copying
[✓] Extension installation complete

 ? View documentation using default browser? (Y/n) › No
```

### Instalar `multibib`

Aunque `quarto-cv` ya trae instalado `multibib`, no fuí capaz de modificar `quarto-cv` para que también me generar la versión en HTML. Por lo tanto, para intalar `multibib`, introducimos en la Terminal el siguiente comando:

``` {.bash filename="Terminal"}
quarto install extension pandoc-ext/multibib
```

Tras seguir las instrucciones (introducir Yes, Yes, No) que nos aparecen en la Terminal, esta se debe de ver así:

``` {.bash filename="Terminal"}
Quarto extensions may execute code when documents are rendered. If you do not 
trust the authors of the extension, we recommend that you do not install or 
use the extension.
 ? Do you trust the authors of this extension (Y/n) › Yes
[✓] Downloading
[✓] Unzipping
    Found 1 extension.

The following changes will be made:
pandoc-ext/multibib   [Install]   1.0.0 (filter)
 ? Would you like to continue (Y/n) › Yes

[✓] Copying
[✓] Extension installation complete

 ? View documentation using default browser? (Y/n) › No
```

### Crear un archivo `.qmd`

En RStudio hay varias formas de crear un archivo `.qmd`[^3]. Yo creé un archivo que se llama `cv.qmd`, en esté en donde agregaremos la información para generar nuestro CV en versión HTML o PDF. En este documento irán las opciones de la cabecera YAML así como nuestra información en formato Markdown. Primero agregaremos la información del YAML.

[^3]: [Creando documentos en RStudio.](https://quarto.org/docs/tools/rstudio.html#creating-documents)

#### Configurando el YAML {#sec-yaml}

``` {.yaml filename="cv.qmd" code-line-numbers="true"}
---
title: CV                                    # <1>
date: last-modified                          # <2>
date-format: iso                             # <3>

author: Álex Espinosa-Correa                 # <4>
address: "Medellín, Colombia"                # <5>
# phone: your contact number                 # <5>
email: alex.espinosa@udea.edu.co             # <5>
github: alexespinosaco                       # <5>
orcid: 0000-0002-7353-1182                   # <5>
# twitter: alexespinosaco                    # <5>
# web: alexespinosaco.github.io/             # <5>

fontsize: 12pt                               # <6>
#fontfamily: ebgaramond-maths                # <6>
#mainfont: Ubuntu                            # <6>
fontawesome: yes                             # <7>

# Use the multibib extension
filters:                                     # <8>
  - multibib

# Turn off YAML validation
validate-yaml: false                         # <8>

# Define list of separate bibliography files
nocite: '@*'                                 # <9>
bibliography:                                # <10>
  main: references.bib                       # <10>
  appendix: appendix.bib                     # <10>
csl: apa-cv.csl                              # <11>

# Disable citeproc
citeproc: false                              # <8>

format:
  html:                                      # <12>
    toc: true                                # <12>
  quarto-cv-pdf: default                     # <12>
css: cv.css                                  # <13>
---
```

1. Título en el HTML y parte del pie de página del PDF.
2. Fecha de publicación en el HTML y parte del pie de página del PDF.
3. Sólo afecta al HTML. Para el PDF hay que [modificar los `*.tex`](#sec-tex)
4. Autor en el HTML. Parte de la cabecera y del pie de página del PDF.
5. Datos personales, aparecen sólo en el PDF. Las opciones son las disponibles en `quarto-cv`, [hay algunas más](https://github.com/mps9506/quarto-cv?tab=readme-ov-file#contact-block), se pueden cambiar al [modificar los `*.tex`](#sex-tex)
6. Referentes a la fuente y sus propiedades, se pueden [modificar](https://github.com/mps9506/quarto-cv?tab=readme-ov-file#fonts).
7. En el PDF, aparecen iconos de [Font Awesome](https://fontawesome.com) junto a los datos personales. 
8. Es necesario para que `multibib`[funcione correctamente en Quarto](https://github.com/pandoc-ext/multibib?tab=readme-ov-file#quarto) y poder crear múltiples bibliografías[^4]. 
9. Es necesario indicarle a Quarto que incluya toda la bibliografía que [no estamos citando](https://quarto.org/docs/authoring/footnotes-and-citations.html#including-uncited-items) que encuentre en los archivos .bib (u otros formatos).
10. Podemos [incluir múltiples bibliografías](https://github.com/pandoc-ext/multibib?tab=readme-ov-file#multibib) gracias a `multibib`. Sólo necesitamos asignar un nombre e indicar el archivo donde está la bibliografía[^5]. Estos nombres (claves) deben coincidir con los [divs](https://quarto.org/docs/authoring/footnotes-and-citations.html#bibliography-generation) que incluiremos [en el Markdown](#sec-markdown). 
11. Podemos agregar el estilo de citación que queramos, agregando el [CSL](https://citationstyles.org/) correspondiente. Por defecto, Quarto utiliza [Chicago](https://quarto.org/docs/authoring/footnotes-and-citations.html#sec-citations-style). Mientras que `quarto-cv`utiliza una versión modificada de APA, aunque a mí no me ha funcionado, y la he tenido que [descargar](https://github.com/mps9506/quarto-cv/blob/main/apa-cv.csl). Adicionalmente, se pueden descargar [más de 10000 estilos de citación](https://www.zotero.org/styles).
12. Los formatos de salida serán HTLM con la tabla de contenido (`toc: true`) y `quarto-cv-pdf` nos genera el PDF. 
13. Está opción nos servirá para estilizar el HTML resultante. Lo miraremos en la [sección sobre CSS](#sec-css).

[^4]: No tengo tan claro sí `citeproc: false` sea necesario, he probado con `citeproc: true` y obtengo igual resultado. Creería que en este escenario no es necesario desactivarlo ya que [la descripción de `multibib`](https://github.com/pandoc-ext/multibib?tab=readme-ov-file#multibib) dice: "this filter allows to create multiple bibliographies using citeproc". Aunque puede [haber escenarios](https://www.andrewheiss.com/blog/2023/12/11/separate-bibliographies-quarto/#disable-citeproc) donde sea necesario desactivarlo. 

[^5]: Algunos ejemplos:\
``` {.yaml}
bibliography:
  peer: peer.bib
  reports: reports.bib
  books: books.bib
  software: software.bib
```
Tomado de [`quarto-cv`](https://github.com/mps9506/quarto-cv?tab=readme-ov-file#bibliographies).

Teniendo el YAML configurado, en el mismo archivo procederemos a escribir nuestra información personal.

#### Escribiendo Markdown {#sec-markdown}

Después del YAML, agregaremos la información que consideremos pertinente y el estilo en que lo hagamos es a elección. Acá muestro una versión esquemática donde comento lo más importante. La versión completa de mi CV puede verse [acá](../../cv/index.qmd), mientras que el código puede descargarse de mi [GitHub](https://github.com/alexespinosaco/alexespinosaco.github.io/tree/main/cv).

``` { filename="cv.qmd" code-line-numbers="true"}
Una pequeña descripción.                                        # <1>

# Educación                                                     # <2>

**Título - Universidad - Lugar** \hfill [inicio-fin]{.cvfloat}\ # <3>
Título trabajo de grado 

**Título - Universidad - Lugar** \hfill [inicio-fin]{.cvfloat}\ # <3>
Título trabajo de grado 

# Experiencia

**Título - Empresa ** \hfill [inicio-fin]{.cvfloat}\            # <3>
Funciones

**Título - Empresa ** \hfill [inicio-fin]{.cvfloat}\            # <3>
Funciones

# Artículos

::: {#refs-main}                                                # <4>
:::

# Libros

::: {#refs-appendix}                                            # <4>
:::
```

1. Una descripción personal, sólo texto. 
2. Se puede usar [cabeceras](https://quarto.org/docs/authoring/markdown-basics.html#headings) de diferente nivel. Esto van a modificar la apariencia tanto en el HTML como en el PDF. Los cambios son más evidentes en el PDF. Las cabeceras de primer nivel (#) aparecen con mayúscula inicial, mientras que las de segundo nivel (##) son en mayúscula sostenida. 
3. Para que las fechas (o lo que se quiera poner) aparezcan hacia el margen derecho se ha de agregar `\hfill` e `[inicio-fin]{.cvfloat}`. El primero afecta al PDF, mientras que el segundo afecta al HTML. `\hfill` es un [comando de LaTeX](https://www.overleaf.com/learn/latex/Line_breaks_and_blank_spaces#Horizontal_blank_spaces) que inserta un espacio en blanco que llena el espacio disponible entre dos elementos en una misma linea[^6]. De `[inicio-fin]{.cvfloat}` hablamos [más adelante](#sec-css).
4. Acá es donde se generara las diferentes bibliografías. Lo más importante para tener diferentes bibliografías es crear divs para cada bibliografía. En Quarto, los divs se crean utilizando tres dos puntos seguidos (`:::`), como elementos de apertura y cierre del div. Los [divs para la bibliografía](https://quarto.org/docs/authoring/footnotes-and-citations.html#bibliography-generation) deben de ir acompañados de `{#refs-*}`, donde el `*` es el nombre (clave) que asignamos en la opción `bibliography` de nuestro ([YAML Anotación 10.](#sec-yaml)).

[^6]: El resultado sin `\hfill`:\
![](images/sin_hfill.png)\
El resultado con `\hfill`:\
![](images/con_hfill.png)

Ya tendríamos listo nuesto archivo `.qmd`, ya sólo nos faltaría tener dos archivos más para poder obtener nuestro CV en HTML y PDF. El primero de estos archivos es un `.css` que nos permitirá estilizar un poco la presentación del HTML. 

### Crear el `*.css*` {#sec-css}

Una de las cosas que quería cuando comencé a buscar cómo hacer mi CV en Quarto, es que la versión en HTML se viera tal que así:

![Resultado obtenido agregando `[inicio-fin]{.cvfloat}`.](images/con_float.png){#fig-con-float fig-align="center"}

Pero al renderizarlo siempre obtenida este horrible resultado:

![Resultado obtenido sin agregar `[inicio-fin]{.cvfloat}`.](images/sin_float.png){#fig-sin-float fig-align="center"}

Viendo entre las [posibles opciones](#sec-intro). La de [Cynthia Huang](https://www.cynthiahqy.com/posts/cv-html-pdf/) y [Drew Dimmery](https://ddimmery.com/about) son las que muestran el resultado que yo quería.

[float](https://www.w3schools.com/css/css_float.asp)

### Crear los `*.bib`

### Renderizar 

En Quarto, cuando se genera una página HTLM (sola o en un website), está automáticamente puede incluir los otros formatos especificados en el YAML[^7]. Sí  nuestro CV es parte de un proyecto de Quarto, sólo tendremos que renderizar el documento en cuestión o todo el proyecto para incluir los otros formatos automáticamente. Sí por el contraría, nuestro cv no hace parte de un proyecto de Quarto, tendremos que recurrir a la Terminal y utilizar el siguiente comando:

[^7]: [Incluyendo otros formatos en Quarto.](https://quarto.org/docs/output-formats/html-multi-format.html)

``` {.bash filename="Terminal"}
quarto render cv.qmd
```

## Ir un poco más alla

### Modificar los `*.tex` {#sec-tex}

## Posibles errores y soluciones

Cuando intentaba renderizar ambos documentos a la vez o sólo el pdf para agregarlos a esta página me aparecía el siguiente error:

``` {.bash filename="Background Jobs"}
ERROR: 
compilation failed- error
Argument of \str_uppercase:n has an extra }.
<inserted text> 
\par 
l.77   \setmainlanguage[]{}
```

Tras buscar y probar un poco, dí con que el error lo estaba generando el lenguaje que hayamos configurado en el YAML, ya sea en el `*.qmd` en que estemos trabajando o en el archivo de configuración `_quarto.yml` de nuestro proyecto. Intente configura `lang: en` en el archivo `cv.qmd` o en `_quarto.yml`, y no funcionó. Intente utilizando un archivo `_metadata.yml` con `lang: en` en la misma ubicación de `cv.qmd`, y tampoco funciono. La única solución que encontré a esto fue eliminar completamente la opción `lang: *` que tenía en el archivo `_quarto.yml`. Esto es un pequeño problema porque quería conservar la información que Quarto genera automáticamente en español. Una posible solución sea utilizar la opción de [idioma alternativo](https://quarto.org/docs/authoring/language.html#alternate-language) de Quarto, aunque, las más prácticas son agregar `lang: en` en los `*.qmd` (excepto `cv.qmd`) o agregarlo directamente a `_metadata.yml`, como hice con el blog. 

## Futuro
